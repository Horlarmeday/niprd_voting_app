<%- include ('../partials/skeletal') %>

<!-- partial -->
<div class="main-panel">
    <div class="content-wrapper" id="surveys">
        <div class="row">
            <div class="col-md-4 mb-4 stretch-card transparent">
                <div class="card card-tale">
                    <div class="card-body">
                        <p class="mb-4">Total Positive Responses</p>
                        <p class="fs-30 mb-2">{{ metrics.positiveResponses }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4 stretch-card transparent">
                <div class="card card-dark-blue">
                    <div class="card-body">
                        <p class="mb-4">Total Negative Responses </p>
                        <p class="fs-30 mb-2">{{ metrics.negativeResponses }}</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4 stretch-card transparent">
                <div class="card card-dark-blue">
                    <div class="card-body">
                        <p class="mb-4">Total Survey</p>
                        <p class="fs-30 mb-2">{{ metrics.totalResponses }}</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-borderless">
                                <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Response</th>
                                    <th>Date</th>
                                </tr>
                                </thead>
                                <tbody v-for="survey in surveys" :key="survey.id">
                                <tr>
                                    <td>{{ survey.voter.name }}</td>
                                    <td class="font-weight-bold">{{ survey.response === 'a' ? 'Yes': 'No' }}</td>
                                    <td>{{ new Date(survey.createdAt).toDateString() }}</td>
                                </tr>
                                </tbody>
                            </table>
                        </div>
                        <div>
                            <p>
                                Showing {{ pageSize }} of {{ rows }} entries
                            </p>
                            <div class="btn-group mt-3 float-right" role="group" aria-label="Basic example">
                                <button :disabled="isNextButtonDisabled" @click="pageChangeHandle('next')" type="button" class="btn btn-outline-secondary">Prev</button>
                                <button :disabled="isPreviousButtonDisabled" @click="pageChangeHandle('previous')" type="button" class="btn btn-outline-secondary">Next</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- content-wrapper ends -->
</div>
<!-- main-panel ends -->
<script>
  Vue.use(Toasted);
  new Vue({
    el: '#surveys',
    data: {
      surveys: [],
      currentPage: 1,
      pageLimit: 10,
      rows: null,
      pageSize: null,
      pageCount: null,
      metrics: null,
      getSurveysUrl: '/api/surveys',
      getAggregatedSurveyUrl: '/api/survey-metrics',
    },
    mounted() {
      this.getSurveys();
    },
    methods: {
      handleError(e) {
        this.loading = false;
        this.$toasted.error(e.response.data.message).goAway(5000);
      },

      getSurveys() {
        axios.get(`${this.getSurveysUrl}?currentPage=${this.currentPage}&pageLimit=${this.pageLimit}`)
          .then(response => {
            this.surveys = response.data.data.docs
            this.rows = response.data.data.total
            this.pageSize = response.data.data.docs.length
            this.pageCount = response.data.data.pages
            this.getAggregatedSurveyData()
          })
          .catch(error => this.handleError(error))
      },

      getAggregatedSurveyData() {
        axios.get(this.getAggregatedSurveyUrl)
          .then(response => {
            this.metrics = response.data.data
          })
          .catch(error => this.handleError(error))
      },
      pageChangeHandle(value) {
        if (value === 'next') {
          this.currentPage += 1
          this.getSurveys()
        } else if (value === 'previous') {
          this.currentPage -= 1
          this.getSurveys()
        }
      },
    },
    computed: {
      isPreviousButtonDisabled() {
        return this.currentPage === 1
      },
      isNextButtonDisabled() {
        return this.currentPage === this.pageCount
      }
    }
  })
</script>

<%- include ('../partials/footer') %>