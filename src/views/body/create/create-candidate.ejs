<%- include ('../../partials/skeletal') %>

<!-- partial -->
<div class="main-panel">
    <div class="content-wrapper">
        <div class="row">
            <div class="col-md-6 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body" id="create-candidate">
                        <h4 class="card-title">Create a Candidate</h4>
                        <div class="forms-sample">
                            <div class="form-group">
                                <label for="exampleInputUsername1">Name</label>
                                <input type="text" v-model="name" class="form-control" id="exampleInputUsername1" placeholder="Enter candidate name">
                            </div>
                            <div class="form-group">
                                <label for="">Position to Vie For</label>
                                <select v-model="position_id" class="form-control">
                                    <option :value="position.id" v-for="position in positions" :key="position.id">
                                        {{ position.name }}
                                    </option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary mr-2" @click="createCandidate">Submit</button>
                            <a href="/candidates" class="btn btn-light">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- main-panel ends -->


<script>
  Vue.use(Toasted);
  new Vue({
    el: '#create-candidate',
    data: {
      name: null,
      position_id: null,
      token: null,
      positions: [],
      getPositionsUrl: '/api/positions',
      loading: false,
      createCandidateUrl: '/api/candidates'
    },
    mounted() {
      this.token = localStorage.getItem('fmst_ticket');
      if (!this.token) return window.location.replace('/')
      this.getPositions()
    },
    methods: {
      handleError(e) {
        this.loading = false;
        this.$toasted.error(e.response.data.message).goAway(5000);
      },

      handleSuccess(response) {
        this.name = null
        this.position_id = null
        this.$toasted.success(response.data.message).goAway(5000)
      },

      getPositions() {
        axios.get(this.getPositionsUrl, { headers: { 'Authorization': `Bearer ${this.token}` } })
          .then(response => {
            this.positions = response.data.data
          })
          .catch(error => this.handleError(error))
      },

      createCandidate() {
        if (!this.name || !this.position_id) return this.$toasted.error('Input fields are required').goAway(5000);
        const data = { name: this.name, position_id: this.position_id }
        axios.post(this.createCandidateUrl, data, { headers: { 'Authorization': `Bearer ${this.token}` } })
          .then(response => this.handleSuccess(response))
          .catch(error => this.handleError(error))
      }
    }
  })
</script>

<%- include ('../../partials/footer') %>